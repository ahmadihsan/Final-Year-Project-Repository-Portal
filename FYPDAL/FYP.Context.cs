//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FYPDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FYPEntities : DbContext
    {
        public FYPEntities()
            : base("name=FYPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Announcment> Announcments { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Designation> Designations { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<ProjectGroup> ProjectGroups { get; set; }
        public DbSet<ProjectMileStone> ProjectMileStones { get; set; }
        public DbSet<ProjectMileStoneDeadLine> ProjectMileStoneDeadLines { get; set; }
        public DbSet<ProjectSession> ProjectSessions { get; set; }
        public DbSet<ResearchGroup> ResearchGroups { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<TemplateDocument> TemplateDocuments { get; set; }
        public DbSet<UploadedMileStone> UploadedMileStones { get; set; }
        public DbSet<UploadedMileStoneDoc> UploadedMileStoneDocs { get; set; }
        public DbSet<UploadedMileStoneDocsVersion> UploadedMileStoneDocsVersions { get; set; }
        public DbSet<SupervisodBy> SupervisodBies { get; set; }
        public DbSet<WeeklyMeeting> WeeklyMeetings { get; set; }
        public DbSet<PresentationSchedule> PresentationSchedules { get; set; }
        public DbSet<ScheduleFacultyStudent> ScheduleFacultyStudents { get; set; }
        public DbSet<TimeSlot> TimeSlots { get; set; }
        public DbSet<RoomsForPresentation> RoomsForPresentations { get; set; }
        public DbSet<ProjectDirectory> ProjectDirectories { get; set; }
        public DbSet<Communication> Communications { get; set; }
        public DbSet<AssignExternalProject> AssignExternalProjects { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<ExternalGroup> ExternalGroups { get; set; }
        public DbSet<MileStoneEvaluation> MileStoneEvaluations { get; set; }
    
        public virtual ObjectResult<AuthenticateUser> USPAuthenticateUser(string email, string pwd)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthenticateUser>("USPAuthenticateUser", emailParameter, pwdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> USPGetProjectMembers(Nullable<long> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("USPGetProjectMembers", projectIdParameter);
        }
    
        public virtual ObjectResult<StudentsProjectNotAssigned> SP_StudentProjectNotAssigned(Nullable<int> roleId, Nullable<long> sessionId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentsProjectNotAssigned>("SP_StudentProjectNotAssigned", roleIdParameter, sessionIdParameter);
        }
    
        public virtual ObjectResult<string> SP_GetProjectStudents(Nullable<long> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetProjectStudents", pidParameter);
        }
    
        public virtual int SP_ProjectAssignment(Nullable<long> uId, Nullable<long> projectId, ObjectParameter transactionStatus)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProjectAssignment", uIdParameter, projectIdParameter, transactionStatus);
        }
    
        public virtual int SP_ProjectUnAssignment(Nullable<long> projectId, ObjectParameter transactionStatus)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProjectUnAssignment", projectIdParameter, transactionStatus);
        }
    
        public virtual int SP_CheckMileStoneSubmission(Nullable<long> projectId, Nullable<long> pMSId, ObjectParameter status)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var pMSIdParameter = pMSId.HasValue ?
                new ObjectParameter("PMSId", pMSId) :
                new ObjectParameter("PMSId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckMileStoneSubmission", projectIdParameter, pMSIdParameter, status);
        }
    
        public virtual ObjectResult<string> SP_GetCustodianOfDocument(Nullable<long> uMSDId, Nullable<long> projectId)
        {
            var uMSDIdParameter = uMSDId.HasValue ?
                new ObjectParameter("UMSDId", uMSDId) :
                new ObjectParameter("UMSDId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetCustodianOfDocument", uMSDIdParameter, projectIdParameter);
        }
    
        public virtual int SP_SubmitDocumentByStudent(Nullable<int> mileStoneId, Nullable<long> projectId, Nullable<long> supervisodBy, string uploadedFilePath, string comment)
        {
            var mileStoneIdParameter = mileStoneId.HasValue ?
                new ObjectParameter("mileStoneId", mileStoneId) :
                new ObjectParameter("mileStoneId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(long));
    
            var supervisodByParameter = supervisodBy.HasValue ?
                new ObjectParameter("SupervisodBy", supervisodBy) :
                new ObjectParameter("SupervisodBy", typeof(long));
    
            var uploadedFilePathParameter = uploadedFilePath != null ?
                new ObjectParameter("uploadedFilePath", uploadedFilePath) :
                new ObjectParameter("uploadedFilePath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubmitDocumentByStudent", mileStoneIdParameter, projectIdParameter, supervisodByParameter, uploadedFilePathParameter, commentParameter);
        }
    
        public virtual ObjectResult<SP_GetDocumentsSubmittedData> SP_GetDocumentsSubmittedDataForGrid(Nullable<long> sessionId, Nullable<long> mileStoneId, Nullable<bool> evalStatus)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            var mileStoneIdParameter = mileStoneId.HasValue ?
                new ObjectParameter("MileStoneId", mileStoneId) :
                new ObjectParameter("MileStoneId", typeof(long));
    
            var evalStatusParameter = evalStatus.HasValue ?
                new ObjectParameter("EvalStatus", evalStatus) :
                new ObjectParameter("EvalStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDocumentsSubmittedData>("SP_GetDocumentsSubmittedDataForGrid", sessionIdParameter, mileStoneIdParameter, evalStatusParameter);
        }
    
        public virtual ObjectResult<SP_GetProjectStudentsWithReg_Result> SP_GetProjectStudentsWithReg(Nullable<long> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProjectStudentsWithReg_Result>("SP_GetProjectStudentsWithReg", pidParameter);
        }
    
        public virtual ObjectResult<SP_GetDataForGridStudent_Result> SP_GetDataForGridStudent(Nullable<long> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDataForGridStudent_Result>("SP_GetDataForGridStudent", uIdParameter);
        }
    
        public virtual ObjectResult<SP_GetProjectStudentsWithId_Result> SP_GetProjectStudentsWithId(Nullable<long> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProjectStudentsWithId_Result>("SP_GetProjectStudentsWithId", pidParameter);
        }
    
        public virtual int SP_SubmitDocumentByPcMemberAfterCheck(Nullable<long> uMSId, string uploadedFilePath, string statusOfDoc, Nullable<long> umsdid, Nullable<long> userId)
        {
            var uMSIdParameter = uMSId.HasValue ?
                new ObjectParameter("UMSId", uMSId) :
                new ObjectParameter("UMSId", typeof(long));
    
            var uploadedFilePathParameter = uploadedFilePath != null ?
                new ObjectParameter("uploadedFilePath", uploadedFilePath) :
                new ObjectParameter("uploadedFilePath", typeof(string));
    
            var statusOfDocParameter = statusOfDoc != null ?
                new ObjectParameter("StatusOfDoc", statusOfDoc) :
                new ObjectParameter("StatusOfDoc", typeof(string));
    
            var umsdidParameter = umsdid.HasValue ?
                new ObjectParameter("Umsdid", umsdid) :
                new ObjectParameter("Umsdid", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubmitDocumentByPcMemberAfterCheck", uMSIdParameter, uploadedFilePathParameter, statusOfDocParameter, umsdidParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_GetRouteHistoryOfDocs_Result> SP_GetRouteHistoryOfDocs(Nullable<long> umsid)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRouteHistoryOfDocs_Result>("SP_GetRouteHistoryOfDocs", umsidParameter);
        }
    
        public virtual ObjectResult<string> SP_GetCustodianOfDocumentHistory(Nullable<long> custodianId)
        {
            var custodianIdParameter = custodianId.HasValue ?
                new ObjectParameter("CustodianId", custodianId) :
                new ObjectParameter("CustodianId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetCustodianOfDocumentHistory", custodianIdParameter);
        }
    
        public virtual int SP_DistributeDocsToStudent(Nullable<long> umsid, Nullable<long> loggedUserId)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            var loggedUserIdParameter = loggedUserId.HasValue ?
                new ObjectParameter("loggedUserId", loggedUserId) :
                new ObjectParameter("loggedUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DistributeDocsToStudent", umsidParameter, loggedUserIdParameter);
        }
    
        public virtual int SP_DistributeDocsToPCMembers(Nullable<long> umsid, Nullable<long> userId, Nullable<long> loggedUserId, Nullable<long> umsdid)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var loggedUserIdParameter = loggedUserId.HasValue ?
                new ObjectParameter("loggedUserId", loggedUserId) :
                new ObjectParameter("loggedUserId", typeof(long));
    
            var umsdidParameter = umsdid.HasValue ?
                new ObjectParameter("umsdid", umsdid) :
                new ObjectParameter("umsdid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DistributeDocsToPCMembers", umsidParameter, userIdParameter, loggedUserIdParameter, umsdidParameter);
        }
    
        public virtual ObjectResult<SP_GetDocDetailSubmittedBy_Result> SP_GetDocDetailSubmittedBy(Nullable<long> umsdid)
        {
            var umsdidParameter = umsdid.HasValue ?
                new ObjectParameter("umsdid", umsdid) :
                new ObjectParameter("umsdid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDocDetailSubmittedBy_Result>("SP_GetDocDetailSubmittedBy", umsdidParameter);
        }
    
        public virtual int SP_DistributeDocsToSupervisor(Nullable<long> umsid, Nullable<long> loggedUserId, Nullable<long> umsdid)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            var loggedUserIdParameter = loggedUserId.HasValue ?
                new ObjectParameter("loggedUserId", loggedUserId) :
                new ObjectParameter("loggedUserId", typeof(long));
    
            var umsdidParameter = umsdid.HasValue ?
                new ObjectParameter("umsdid", umsdid) :
                new ObjectParameter("umsdid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DistributeDocsToSupervisor", umsidParameter, loggedUserIdParameter, umsdidParameter);
        }
    
        public virtual ObjectResult<SP_GetCommentsByPcMembers_Result> SP_GetCommentsByPcMembers(Nullable<long> projId, Nullable<long> pmsId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            var pmsIdParameter = pmsId.HasValue ?
                new ObjectParameter("pmsId", pmsId) :
                new ObjectParameter("pmsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCommentsByPcMembers_Result>("SP_GetCommentsByPcMembers", projIdParameter, pmsIdParameter);
        }
    
        public virtual ObjectResult<SP_GetDataForGridSupervisor_Result> SP_GetDataForGridSupervisor(Nullable<long> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDataForGridSupervisor_Result>("SP_GetDataForGridSupervisor", uIdParameter);
        }
    
        public virtual int SP_SubmitCommentByPCHead(Nullable<long> pid, Nullable<long> uId, Nullable<long> pmsid, string comment)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubmitCommentByPCHead", pidParameter, uIdParameter, pmsidParameter, commentParameter);
        }
    
        public virtual int SP_MakeCommentsVisibleToStudent(Nullable<long> psid, Nullable<long> pmsid)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeCommentsVisibleToStudent", psidParameter, pmsidParameter);
        }
    
        public virtual ObjectResult<SP_AssignedDocsToPC_Result> SP_AssignedDocsToPC(Nullable<long> sessionId, Nullable<long> mileStoneId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            var mileStoneIdParameter = mileStoneId.HasValue ?
                new ObjectParameter("MileStoneId", mileStoneId) :
                new ObjectParameter("MileStoneId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AssignedDocsToPC_Result>("SP_AssignedDocsToPC", sessionIdParameter, mileStoneIdParameter);
        }
    
        public virtual int SP_CheckWeeklyScheduleOfFacultyAndStudent(Nullable<long> projectId, string day, Nullable<long> userId, ObjectParameter checkExitance)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var dayParameter = day != null ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckWeeklyScheduleOfFacultyAndStudent", projectIdParameter, dayParameter, userIdParameter, checkExitance);
        }
    
        public virtual ObjectResult<SP_GetRecordsForPresentation_Result> SP_GetRecordsForPresentation(Nullable<long> psid, Nullable<long> pmsid, Nullable<int> number)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRecordsForPresentation_Result>("SP_GetRecordsForPresentation", psidParameter, pmsidParameter, numberParameter);
        }
    
        public virtual int SP_CheckConflictPresentationTimings(Nullable<System.DateTime> presentationDate, Nullable<long> psid, Nullable<long> pmsid, ObjectParameter isExist)
        {
            var presentationDateParameter = presentationDate.HasValue ?
                new ObjectParameter("presentationDate", presentationDate) :
                new ObjectParameter("presentationDate", typeof(System.DateTime));
    
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckConflictPresentationTimings", presentationDateParameter, psidParameter, pmsidParameter, isExist);
        }
    
        public virtual ObjectResult<SP_GetPresentationSchedule_Result> SP_GetPresentationSchedule(Nullable<long> psid, Nullable<long> pmsid)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPresentationSchedule_Result>("SP_GetPresentationSchedule", psidParameter, pmsidParameter);
        }
    
        public virtual ObjectResult<SP_GetFreeSlotsDayBased_Result> SP_GetFreeSlotsDayBased(Nullable<long> userId, Nullable<int> day)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFreeSlotsDayBased_Result>("SP_GetFreeSlotsDayBased", userIdParameter, dayParameter);
        }
    
        public virtual ObjectResult<SP_GetMatchingFreeTime_Result> SP_GetMatchingFreeTime(Nullable<long> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMatchingFreeTime_Result>("SP_GetMatchingFreeTime", projectIdParameter);
        }
    
        public virtual ObjectResult<SP_GetPresentationsToStudent_Result> SP_GetPresentationsToStudent(Nullable<long> psid, Nullable<long> pmsid)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPresentationsToStudent_Result>("SP_GetPresentationsToStudent", psidParameter, pmsidParameter);
        }
    
        public virtual ObjectResult<SP_GetPresentationsToIndividualUser_Result> SP_GetPresentationsToIndividualUser(Nullable<long> psid, Nullable<long> userId)
        {
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPresentationsToIndividualUser_Result>("SP_GetPresentationsToIndividualUser", psidParameter, userIdParameter);
        }
    
        public virtual int SP_DeleteDocumentFromUMDoc(Nullable<long> umsid, ObjectParameter checkBit)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteDocumentFromUMDoc", umsidParameter, checkBit);
        }
    
        public virtual int SP_DocSubmissionStatus(Nullable<long> projectId, ObjectParameter scope, ObjectParameter srs, ObjectParameter sds, ObjectParameter rpt)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DocSubmissionStatus", projectIdParameter, scope, srs, sds, rpt);
        }
    
        public virtual ObjectResult<SP_GetProjectDetailForReport_Result> SP_GetProjectDetailForReport(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProjectDetailForReport_Result>("SP_GetProjectDetailForReport", projIdParameter);
        }
    
        public virtual ObjectResult<SP_GetProjectStudentsForReport_Result> SP_GetProjectStudentsForReport(Nullable<long> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProjectStudentsForReport_Result>("SP_GetProjectStudentsForReport", pidParameter);
        }
    
        public virtual ObjectResult<SP_GetSubmittedMileStonesList_Result> SP_GetSubmittedMileStonesList(Nullable<long> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSubmittedMileStonesList_Result>("SP_GetSubmittedMileStonesList", projectIdParameter);
        }
    
        public virtual ObjectResult<SP_GetUploadedDocsCommentsByPCForReport_Result> SP_GetUploadedDocsCommentsByPCForReport(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUploadedDocsCommentsByPCForReport_Result>("SP_GetUploadedDocsCommentsByPCForReport", projIdParameter);
        }
    
        public virtual ObjectResult<SP_GetWeeklyMeetingDetailsForReport_Result> SP_GetWeeklyMeetingDetailsForReport(Nullable<long> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("projId", projId) :
                new ObjectParameter("projId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetWeeklyMeetingDetailsForReport_Result>("SP_GetWeeklyMeetingDetailsForReport", projIdParameter);
        }
    
        public virtual int SP_DeleteDocumentFromUMDoc1(Nullable<long> umsid, ObjectParameter checkBit)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("umsid", umsid) :
                new ObjectParameter("umsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteDocumentFromUMDoc1", umsidParameter, checkBit);
        }
    
        public virtual int SP_DeleteEmailFromCommunication(Nullable<long> comid, ObjectParameter checkBit)
        {
            var comidParameter = comid.HasValue ?
                new ObjectParameter("comid", comid) :
                new ObjectParameter("comid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteEmailFromCommunication", comidParameter, checkBit);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_DeleteEmailFromCom(Nullable<long> comid, ObjectParameter checkBit)
        {
            var comidParameter = comid.HasValue ?
                new ObjectParameter("comid", comid) :
                new ObjectParameter("comid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_DeleteEmailFromCom", comidParameter, checkBit);
        }
    
        public virtual ObjectResult<Communication> SP_DeleteEmailFromCommunication1(Nullable<long> comid, ObjectParameter checkBit)
        {
            var comidParameter = comid.HasValue ?
                new ObjectParameter("comid", comid) :
                new ObjectParameter("comid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Communication>("SP_DeleteEmailFromCommunication1", comidParameter, checkBit);
        }
    
        public virtual ObjectResult<Communication> SP_DeleteEmailFromCommunication1(Nullable<long> comid, ObjectParameter checkBit, MergeOption mergeOption)
        {
            var comidParameter = comid.HasValue ?
                new ObjectParameter("comid", comid) :
                new ObjectParameter("comid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Communication>("SP_DeleteEmailFromCommunication1", mergeOption, comidParameter, checkBit);
        }
    
        public virtual int SP_Communication(Nullable<long> msgFrom, Nullable<long> msgTo, string subject, string msgContent, Nullable<bool> readstatus, Nullable<long> pid, string fileattached)
        {
            var msgFromParameter = msgFrom.HasValue ?
                new ObjectParameter("MsgFrom", msgFrom) :
                new ObjectParameter("MsgFrom", typeof(long));
    
            var msgToParameter = msgTo.HasValue ?
                new ObjectParameter("MsgTo", msgTo) :
                new ObjectParameter("MsgTo", typeof(long));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var msgContentParameter = msgContent != null ?
                new ObjectParameter("MsgContent", msgContent) :
                new ObjectParameter("MsgContent", typeof(string));
    
            var readstatusParameter = readstatus.HasValue ?
                new ObjectParameter("Readstatus", readstatus) :
                new ObjectParameter("Readstatus", typeof(bool));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(long));
    
            var fileattachedParameter = fileattached != null ?
                new ObjectParameter("Fileattached", fileattached) :
                new ObjectParameter("Fileattached", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Communication", msgFromParameter, msgToParameter, subjectParameter, msgContentParameter, readstatusParameter, pidParameter, fileattachedParameter);
        }
    
        [DbFunction("FYPEntities", "Func_GetExternalsNameAgainstProjectID")]
        public virtual IQueryable<Func_GetExternalsNameAgainstProjectID_Result> Func_GetExternalsNameAgainstProjectID(Nullable<long> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Func_GetExternalsNameAgainstProjectID_Result>("[FYPEntities].[Func_GetExternalsNameAgainstProjectID](@PID)", pIDParameter);
        }
    
        public virtual int SP_CreatGroupOfExternal(Nullable<long> external1, Nullable<long> external2, Nullable<long> external3, Nullable<long> psid)
        {
            var external1Parameter = external1.HasValue ?
                new ObjectParameter("External1", external1) :
                new ObjectParameter("External1", typeof(long));
    
            var external2Parameter = external2.HasValue ?
                new ObjectParameter("External2", external2) :
                new ObjectParameter("External2", typeof(long));
    
            var external3Parameter = external3.HasValue ?
                new ObjectParameter("External3", external3) :
                new ObjectParameter("External3", typeof(long));
    
            var psidParameter = psid.HasValue ?
                new ObjectParameter("psid", psid) :
                new ObjectParameter("psid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreatGroupOfExternal", external1Parameter, external2Parameter, external3Parameter, psidParameter);
        }
    
        public virtual int SP_UpdateUserWithIsGroupedValue(Nullable<long> ext, Nullable<bool> isgroup)
        {
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(long));
    
            var isgroupParameter = isgroup.HasValue ?
                new ObjectParameter("isgroup", isgroup) :
                new ObjectParameter("isgroup", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateUserWithIsGroupedValue", extParameter, isgroupParameter);
        }
    
        public virtual ObjectResult<SP_GetNamesOfExternalGroupMember_Result> SP_GetNamesOfExternalGroupMember(Nullable<long> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNamesOfExternalGroupMember_Result>("SP_GetNamesOfExternalGroupMember", uIdParameter);
        }
    
        public virtual int SP_RemoveExtGroupByFirstUserId(Nullable<long> eid)
        {
            var eidParameter = eid.HasValue ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RemoveExtGroupByFirstUserId", eidParameter);
        }
    
        public virtual ObjectResult<SP_GetNamesofExternalsbyId_Result> SP_GetNamesofExternalsbyId(Nullable<long> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNamesofExternalsbyId_Result>("SP_GetNamesofExternalsbyId", uIdParameter);
        }
    
        public virtual int SP_ChangeIsGroupedbyId(Nullable<long> eid, Nullable<bool> isGroup)
        {
            var eidParameter = eid.HasValue ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(long));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("isGroup", isGroup) :
                new ObjectParameter("isGroup", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ChangeIsGroupedbyId", eidParameter, isGroupParameter);
        }
    
        public virtual int SP_SubmitDocByStudent(Nullable<long> mileStoneId, Nullable<long> projectId, Nullable<long> supervisodBy, string uploadedFilePath, Nullable<long> uid)
        {
            var mileStoneIdParameter = mileStoneId.HasValue ?
                new ObjectParameter("mileStoneId", mileStoneId) :
                new ObjectParameter("mileStoneId", typeof(long));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(long));
    
            var supervisodByParameter = supervisodBy.HasValue ?
                new ObjectParameter("SupervisodBy", supervisodBy) :
                new ObjectParameter("SupervisodBy", typeof(long));
    
            var uploadedFilePathParameter = uploadedFilePath != null ?
                new ObjectParameter("uploadedFilePath", uploadedFilePath) :
                new ObjectParameter("uploadedFilePath", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubmitDocByStudent", mileStoneIdParameter, projectIdParameter, supervisodByParameter, uploadedFilePathParameter, uidParameter);
        }
    
        public virtual int SP_CheckMileStoneEvaluation(Nullable<long> projectId, Nullable<long> pMSId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(long));
    
            var pMSIdParameter = pMSId.HasValue ?
                new ObjectParameter("PMSId", pMSId) :
                new ObjectParameter("PMSId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckMileStoneEvaluation", projectIdParameter, pMSIdParameter);
        }
    
        public virtual int SP_SetEvalStatus(Nullable<long> pid, Nullable<long> pmsid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("pmsid", pmsid) :
                new ObjectParameter("pmsid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SetEvalStatus", pidParameter, pmsidParameter);
        }
    
        public virtual int SP_UpdateEvaluationRemarks(Nullable<long> studentId, Nullable<long> procjectId, string comments, string commentsaboutProject, Nullable<long> rid, Nullable<long> uId, Nullable<long> pmsid, Nullable<double> obtainmarks)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(long));
    
            var procjectIdParameter = procjectId.HasValue ?
                new ObjectParameter("ProcjectId", procjectId) :
                new ObjectParameter("ProcjectId", typeof(long));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var commentsaboutProjectParameter = commentsaboutProject != null ?
                new ObjectParameter("CommentsaboutProject", commentsaboutProject) :
                new ObjectParameter("CommentsaboutProject", typeof(string));
    
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(long));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(long));
    
            var pmsidParameter = pmsid.HasValue ?
                new ObjectParameter("Pmsid", pmsid) :
                new ObjectParameter("Pmsid", typeof(long));
    
            var obtainmarksParameter = obtainmarks.HasValue ?
                new ObjectParameter("Obtainmarks", obtainmarks) :
                new ObjectParameter("Obtainmarks", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateEvaluationRemarks", studentIdParameter, procjectIdParameter, commentsParameter, commentsaboutProjectParameter, ridParameter, uIdParameter, pmsidParameter, obtainmarksParameter);
        }
    
        public virtual int SP_UnAssignDocument(Nullable<long> umsid, Nullable<long> umsdid)
        {
            var umsidParameter = umsid.HasValue ?
                new ObjectParameter("Umsid", umsid) :
                new ObjectParameter("Umsid", typeof(long));
    
            var umsdidParameter = umsdid.HasValue ?
                new ObjectParameter("Umsdid", umsdid) :
                new ObjectParameter("Umsdid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UnAssignDocument", umsidParameter, umsdidParameter);
        }
    
        public virtual ObjectResult<SP_GetAssignedDocumentsForGrid_Result> SP_GetAssignedDocumentsForGrid(Nullable<long> sessionId, Nullable<long> mileStoneId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(long));
    
            var mileStoneIdParameter = mileStoneId.HasValue ?
                new ObjectParameter("MileStoneId", mileStoneId) :
                new ObjectParameter("MileStoneId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAssignedDocumentsForGrid_Result>("SP_GetAssignedDocumentsForGrid", sessionIdParameter, mileStoneIdParameter);
        }
    }
}
